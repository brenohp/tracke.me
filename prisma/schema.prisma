// schema.prisma - Versão Final e Corrigida

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Business {
  id        String @id @default(cuid())
  name      String
  phone     String?
  status    String @default("ACTIVE")
  subdomain String @unique

  // --- INÍCIO DA CORREÇÃO ---
  // A relação agora aponta para o campo 'businesses' no modelo Plan
  planId    String?
  plan      Plan?     @relation(fields: [planId], references: [id])
  // --- FIM DA CORREÇÃO ---
  
  users     User[]
  services  Service[]
  clients   Client[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  password String
  role     Role     @default(OWNER)

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  services       Service[]      @relation("ProfessionalsOnServices")
  availabilities Availability[]
  timeOffs       TimeOff[]
  appointments   Appointment[]  @relation("ProfessionalAppointments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id                String        @id @default(cuid())
  name              String
  description       String?
  price             Decimal       @db.Decimal(10, 2)
  durationInMinutes Int
  status            ServiceStatus @default(ACTIVE)

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  professionals User[] @relation("ProfessionalsOnServices")
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id           String  @id @default(cuid())
  name         String
  phone        String?
  email        String?
  observations String?

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id             String            @id @default(cuid())
  startTime      DateTime
  endTime        DateTime
  status         AppointmentStatus @default(SCHEDULED)

  clientId       String
  client         Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  serviceId      String
  service        Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  professionalId String
  professional   User @relation("ProfessionalAppointments", fields: [professionalId], references: [id], onDelete: Cascade)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Availability {
  id        String @id @default(cuid())
  dayOfWeek Int
  startTime String
  endTime   String
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TimeOff {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  reason    String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plan {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  features    Json
  active      Boolean  @default(true)

  // Relação: Um plano pode ter vários negócios
  businesses  Business[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  OWNER
  EMPLOYEE
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}