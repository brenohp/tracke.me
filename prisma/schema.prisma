// schema.prisma - Vers√£o Final e Correta

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Business {
  id     String @id @default(cuid())
  name   String
  phone  String?
  plan   String @default("TRIAL")
  status String @default("ACTIVE")
  subdomain String @unique // <-- O CAMPO QUE FALTAVA NO SEU ARQUIVO

  users     User[]
  services  Service[]
  clients   Client[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  password String
  role     Role     @default(OWNER)

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  availabilities Availability[]
  timeOffs       TimeOff[]
  appointments   Appointment[]  @relation("ProfessionalAppointments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Decimal
  duration    Int
  
  businessId  String
  business    Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  appointments Appointment[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Client {
  id      String  @id @default(cuid())
  name    String
  phone   String?
  email   String?
  
  businessId   String
  business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)

  appointments Appointment[]

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Appointment {
  id        String            @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(SCHEDULED)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  professionalId String
  professional   User @relation("ProfessionalAppointments", fields: [professionalId], references: [id], onDelete: Cascade)

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum Role {
  ADMIN
  OWNER
  EMPLOYEE
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  NO_SHOW
}

model Availability {
  id        String @id @default(cuid())
  dayOfWeek Int
  startTime String
  endTime   String
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TimeOff {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  reason    String?
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}